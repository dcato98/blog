{
  
    
        "post0": {
            "title": "PDFs in Python",
            "content": "This notebook primarily intended as a quick reference for working with PDFs in Python, to be expanded over time. The structure and much of the content is based on following this tutorial in the PyMuPDF docs. . PyMuPDF: . GitHub | Docs | Recipes: Docs - Recipes | Wiki - Recipes (e.g. working with SVGs, extract fonts, extract text from rectangle) | GitHub - Utilities (e.g. demo.py - python script similar to this notebook) | . | Supported formats: PDF, XPS, OpenXPS, CBZ, CBR, FB2, EPUB | . | . Installation . Installing with pip: . # !pip install PyMuPDF . Import (fitz) &amp; Version Info . import fitz . print(fitz.__doc__) . PyMuPDF 1.17.0: Python bindings for the MuPDF 1.17.0 library. Version date: 2020-05-13 20:05:13. Built for Python 3.7 on linux (64-bit). . Working with Documents . Open Document . First, download a document to work with. Note the use of joblib to cache the response, which saves us time on reloading the notebook and also is nice by not hitting the server again): . from joblib import Memory from pathlib import Path # !pip install requests import requests path = Path(&#39;.&#39;) CACHE_DIR = path / &#39;.jupyter_cache&#39; memory = Memory(CACHE_DIR, verbose=0) @memory.cache def download(url, dst): response = requests.get(url, allow_redirects=True) with open(dst, &#39;wb&#39;) as f: f.write(response.content) url = &#39;https://ai2-website.s3.amazonaws.com/publications/Siegel16eccv.pdf&#39; fn = path / &#39;example.pdf&#39; download(url, fn) fn . PosixPath(&#39;example.pdf&#39;) . doc = fitz.open(fn) . Close Document . # doc.close() . Read Meta Data . doc.pageCount, doc.metadata, doc.getToC() . (16, {&#39;format&#39;: &#39;PDF 1.5&#39;, &#39;title&#39;: None, &#39;author&#39;: None, &#39;subject&#39;: None, &#39;keywords&#39;: None, &#39;creator&#39;: &#39;TeX&#39;, &#39;producer&#39;: &#39;pdfTeX-1.40.16&#39;, &#39;creationDate&#39;: &#39;D:20160726031438Z&#39;, &#39;modDate&#39;: &#39;D:20160726031438Z&#39;, &#39;encryption&#39;: None}, []) . Working with Pages . Read Pages . # index by page numer page_no = 0 page = doc[page_no] page . page 0 of example.pdf . # iterate over pages for page in doc: pass # slice over pages for page in doc.pages(2,6): pass . Inspect a Page . links . # all links in one page links = page.getLinks() # iterator over links for link in page.links(): pass links . [] . annotations &amp; form fields . # iterate over annotations for annot in page.annots(): print(annot) # iterate over form fields for field in page.widgets(): print(field) . Convert Page to Image . pix is a Pixmap object which (in this case) contains an RGB image of the page, ready to be used for many purposes. Method Page.getPixmap() offers lots of variations for controlling the image: resolution, colorspace (e.g. to produce a grayscale image or an image with a subtractive color scheme), transparency, rotation, mirroring, shifting, shearing, etc. For example: to create an RGBA image (i.e. containing an alpha channel), specify pix = page.getPixmap(alpha=True). . Choose Resolution . # default (poor resolution causes text in example.pdf to be barely readable) # file size: 120 kB pix = page.getPixmap() # 2x default resolution (text is clear, image text still hard to read) # file size: 328 kB zoom_xy = (2., 2.) mat = fitz.Matrix(*zoom_xy) pix = page.getPixmap(matrix=mat) # use &#39;mat&#39; instead of the identity matrix # 4x default resolution (image text is barely readable) # file size: 691 kB zoom_xy = (4., 4.) mat = fitz.Matrix(*zoom_xy) pix = page.getPixmap(matrix=mat) # use &#39;mat&#39; instead of the identity matrix # 8x default resolution (image text is pretty clear but still not perfect) # file size: 1.4 MB zoom_xy = (8., 8.) mat = fitz.Matrix(*zoom_xy) pix = page.getPixmap(matrix=mat) # use &#39;mat&#39; instead of the identity matrix . Save Page as PNG . dst = fn.parent / f&#39;{fn.stem}_page-{page.number}.png&#39; dst . PosixPath(&#39;example_page-5.png&#39;) . pix.writeImage(str(dst)) . Open page with Pillow . from PIL import Image mode = &quot;RGBA&quot; if pix.alpha else &quot;RGB&quot; img = Image.frombytes(mode, [pix.width, pix.height], pix.samples) . import matplotlib.pyplot as plt plt.figure(figsize=(10,20)) plt.imshow(img); . Extract Text &amp; Images . Use one of the following strings for opt to obtain different formats [2]: . “text”: (default) plain text with line breaks. No formatting, no text position details, no images. “blocks”: generate a list of text blocks (= paragraphs). “words”: generate a list of words (strings not containing spaces). “html”: creates a full visual version of the page including any images. This can be displayed with your internet browser. “dict” / “json”: same information level as HTML, but provided as a Python dictionary or resp. JSON string. See TextPage.extractDICT() resp. TextPage.extractJSON() for details of its structure. “rawdict”: a super-set of TextPage.extractDICT(). It additionally provides character detail information like XML. See TextPage.extractRAWDICT() for details of its structure. “xhtml”: text information level as the TEXT version but includes images. Can also be displayed by internet browsers. “xml”: contains no images, but full position and font information down to each single text character. Use an XML module to interpret. . To get an idea about the output of these alternatives, see Appendix 2: Details on Text Extraction. . text_options = { &#39;text&#39;, &#39;blocks&#39;, &#39;words&#39;, &#39;html&#39;, &#39;dict&#39;, &#39;json&#39;, &#39;rawDict&#39;, &#39;xhtml&#39;, &#39;xml&#39;} opt = &#39;xhtml&#39; text = page.getText(opt) text . &#39;&lt;div id=&#34;page0&#34;&gt; n&lt;p&gt;6 Noah Siegel, Zachary Horvitz, Roie Levin, Santosh Divvala, and Ali Farhadi&lt;/p&gt; n&lt;p&gt;&lt;img width=&#34;311&#34; height=&#34;66&#34; src=&#34;data:image/png;base64, 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 nimhl3W/uvPnWffrjcDgSicxsNLtR48UJ2OKBGEsUwAsVwEgOk1XsKyoqyIIO3aoK nwdCBg75//45CIulslZVGo+no6ER+/9ZB8iV8B/XrP8rR4b9duxDCFYLLFy+Gh4Wf nOH2KTqdv8Fnne2C/OApBZlb2rdv38DjWG/SgQY/BYEikWjr9rybrBNUGGoWK/xGL nRqNNzS2iv3+rqqgcYmsHDAPd2r/Z818Czg6Lw6FR6MSEuG8REWkpySCFQCBUVlaa nmJpNnjYNiUBSKH/r5IKBER8qtW7GNLfOzZrXq0lghQAqWk0hiIyIyMzMVFZWAUVT nw8FDP39xcZ1sLvkYgiYVgtevXhUXl7i6TqayvNvM82fOjpsw3sDQsKHuEKYQgOos nPSOTtfYjEgkCqalpxsY9DLp0kdRCfkCtgUKhSktKXZ0nlpeVDRg44NT5CyAFpEu9 ncOaYgcViv3z6tGn9+joqlSU8E4njJ03y8vZWVlZmMBgsLRwGpuUBP8muhgYtpS7D nCgFEtI7vhkgk7v5vZ2xMDEFBYbfvHmPjXpDsNjYm1nn8+GMnT4wbPx5EZ02fPn3G nzNFjx4CSvyC/QENDXVFJiTt/Qnz8k8dPNmzaKOmBfvyIf/7ytbmZ6WinUZBYzk05 n+/V8UGcdOnDgsJ/fls1bFi5epNTYcqkTFhr6v9Wrc3NyOWMLSktKVNXUjhw7Zmc/ nXIO9jBAMzL8ErBBAiFzr0FNcJtPq6h4FPOVEFy+Yn5yc8u7jhwbvfEFB/o1rV8DT nwWSyXvYvLMjPTE8bPspuzlxPAgFb7+vn1Ql4pALW/69fP79HfTMw6NDbolfD8sVs nPYB7yxSyfDFCmEhQUUGeNMn//fsC7pPy8hro5+fElSBwMAH/+gQ8/8IWMeZdmUCc n/5joH5s3bikvr8LjFeg0JpVKGztuwohRjgMHDW58IJ6VCfj/EQhYKoCRB2RUIUhK nStq/17esrAyPx3NSQJM6Iz397oP73bp3l3RvTSoE4eHh6Wlp02fM4ETXr/XxPbBf nnD0XFRd//PQFy/ZGlZaWkclkbW2tBpubCZOJZE0DqgCaud8iIw/57qFSqHMWLhzp n4EClskZjMaX4OihbsFJQVCTV1GT9zLx66WJOTo6KikoNkWhsZrbCa7W6ujroa8nC nXKUwbQHQa7UZOkRH569G7QgDVgigotUUAlBN8K8wT6VSQYnUDFfgqhUrQYG24/e6 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 nAwODb1J0YkJCfLwqh36O/zJPXFyctra2ui66/Kcr+3fzx8fHyxeRS0HxDZEQqAsJ nwT/i9+SJs6NTbgOD46dPpXPRL1++3Ll9x4J58x2dHectWPDxDLIpfby99+3dN3fW nrDnz5/Xq0+cLSzx75sz+ffvWrvnz9NkzlatU+ZS3LJw3f+KECe7nztWoWSNlYlBQ n0K4dSTV3cnaeu2D+F9YK+BIkBOpCQgAggyMhyNTSLSF4/x/usvNLPIAvkfyTt82S npV6Wf/vWNcJ3hYTgK7px/fr+Ay55chmMHJPelzRK0R43PG7d9Gjn5GTv4JDmPCeO nHw/wD7h44cLEyZNMTE2/pLj4+Pg9u3dHRkTcv39/ybJln/IWvydPXA64PPH1XbR0 nSerpp0+d8vX1vXTh4uhxY8uWLfsltQK+BAmBupAQ/FOjR4yUNvzkGfdvUnp9e4dK nlSouWLTog+nz5sz5oU6dOnXrymvz0majRo/q1bfvlxcnfUGNqtWOnTj+iQmB9Bo1 nq1V3PXIkdUKgcLC1q1K16vxFC7+8VsBnIyFQFxICABkcCUGmlm4JQWJiopSVkJDw n/r17liznUuKCr1EWvmMpkcD79zZZstTT0dGR19ra2t+6XviukBB8Rbdu3vyxUaN+ n/fpNnTYt/Ys+dNB1zqzZR0+4/ZBqKAaF9E/SlLi7u+/esXPv7t23vO4UKlz4S4qL nj493OXBg6aLFuQwMjrgd+5S3BPj7t2vdplChQgePHE49/dzZs3t379myebOH5y3j n4sW/pFbAlyAhUBcSgn9qyC+D7np5nXA/nTJF+Qw/+BLKxL/7Wqb+pzRn+y8LdLCr nV6VqlfkLF6aevnD+gikTJx457lbXxkb2GypaVpg4eVK3Hj0+ZXU+rkDqKZ63bjWq n3+Ck+2nLChU+pZ5ed+5IDT9ICJQF2tvYVq1WTUkI0lxBIB2QEKgLCcGXiIuLkw8w nR47/dhvxVyXHGrGxsf/zxuLw8HBDQ0N1FSprnZiYqK+v/+lvCQ8LM8yb9+PpspyY n6GiD3LnVVTd8l0gIMrX0SQiUMCAhmXIPgRIYaDHWEP4J5Zf+70jAVkkIlJCARgBq nRELwddnWqWNXr960GTPSv+iQ4GCr8pZ7DuxTLvlM8ezZs5nTpy9aukQvq97JEye6 ndurscduzUKFCX17isMFD7t6953by+CfOP3jgL48fPTp07OgH069cvty6eYsrHjeK nkxDg2yEhUJcMkhD4+vpOHDcu7k2cjq5O+pf+d+Lj401MTH+bMT31KZLUCUF0VNSK n5Sv8/fzkczTMm3fcxAn6+vobN2xwP3U6X/58AX7+lSpXmjhlSmBAwNjRY3Ib5nGw nt9+yebMsMzg4uETJkhUrVjxx/PgTX98169aWKl1aK/kZyOvWrr1x/Xo2vWzv3r2b nMvXXQoULu7oclGUaGxu/fPnSzc2t/4D+v02fnlKfgwdcxo8bFxYaWrN2LSdn57bt n2lW0rODo7Cx1dj99umChQqvWrJbZpM4Tx08oa17Wytp67dq1Y8eOta5Ycf6cuVJK nWHiYg0P9zl27xMTEbN64ycvL661KZWZmNmb8OM9bnk0bN5467TfZQNL4N2nadPjI nkUq53g+9Vy5fLr+9169eyc7K9l07dXV1P0gIXF1cNm7YKDUPCgo6ftxtwMCBk6ZM nuXLl8q7tO+U3GxYWNmXqVNNSX3STHPCPkBCoCwnB55Em97ib2/lz55w7dLC2tk7/ nCty7e/e2521p0qtVr9boxx/TnOfFixdn3c+EhoVm0crSb0D/Ly/0yqXL/gH+Xrfv ntGnXTrrFT3mL1PCMu7v0HePGj089/f69e563bvn5+VlZWTdt3uzL64bvGAlBppZu nCUFiYmJCQoJsNeUegsRkmf02AulrpP5Zs2b9VhWQ0uUj/Z+jUsfFxWXPnl1dhX7G nWv9dBWQ5KpUqW7Zsn7gcJQnQTqbcQyDV0NHRkT9pBKBGmTgh+C+XT34Tadbnh5o1 nGzRsmHKqRT5u5fr91Je3REdHy39linKLkLQUshz5wUvPIW2Q/JkjRw758cfHx0sR nH7QvMvGt6m0W7Sw5c+ZMmRgTHS3b6WlgoL2N3e79e1MnBD7e3l07d1bFq9zPn5MS nDx86NLBff4/bnrJY/Rz62jraKYvV1dWVQqUCCe/eZUsuNCoqSiqmVCZ1zaWqStM2 noG+/wMBAl0OuMTExuXLl+uDDkZk/eHvfXr2fPX3qevTIfz4KKUJb+8L58z26dL10 n/VqJEiVk9VXx8VmSP7EMtbnx3SMhUJcMkhB0bN9+544duXMZyMZM/9L/znut9+HR nUbNnzhwzblzKxJSEICQkZPvWrdKGl7ewkGbZ0rzc9JkzmzRraly4iOvhQ7b16nXu n0PFNbOxht2PSs0z/7be5c+dt2bIlXqVycLCfMnHS7r17d+/eXdqstKy7vYPD5F9/ nlQZ1y6ZNpc3MlMcCO9ja1fqhdjtHx2GDh0ybOaNW7dqnT53q169fr59/loJS6iO7 nto98fBra11+/aaNtPTuZUqtadVnIqjVrLl68OGHs2JV//MvG1lb2JH7pP2Df/n0b nN20KCwsrXbr09WvXHJ2cDHLnPuPu3q5VG98Av3179/p4+8ycM9vPz2/urNmr1/55 n2/N2A3v7Xn16jx0/fsWy5YdcD67fuMmsjNnVK1cWLVi4dMVy2fW/6eExaOAvv06d n2taxXeqE4NBB11+nTJmeXPNTJ0/279dv4ICBI0aPcm7Xbs68+aVKl5o4fnyLli1t n7ezSf8tCY5EQqAsJweeR7mDThg1rVq1et3FDmW8xXKf0F1cvX1m5cuW0GdPTHOlU nahj6+vW1a9eWL1nauMlPg4cO/fJCPW/dunDh4rYtm9esXWtertynvCUwIGDkiJHF nihZduGRx6um+jx9fuXJF+qNJU6b82DjthANQkBBkaumWECg3EMhWS0w8nSXLueSb nCTLxQEOJiYk+3t5PnjypWKlSkSJF0r8CL4OSvH79upixsbm5eZrzREZGPvH1ld+L nvJbDhC8vNMA/IDw8LOjFiwpW1kWLFf2Ut0gNpQ6RkVEO9f9fVxgcHPzi+fPQ0NDC nhQvLId4nViBliCEdHZ337220te2VhEC5jeAfrw/wNzJlQnD+7LkpkyYpIVr6l/53 nYqKjHerXHz1ubO5Ud6SmTgi8Hz5cvWqVSqUKfR1qZW09dPiw6OjoyRMnvlW9zZkz n55XLl4cOH+7o7HTyxInJkyfb2tjmz5//2NGjFawq3PK4KQvJZWDgduyYrq7u/oMu nysKfP3u2fNmyqMiomJjoosWMJ06elD179sEDf5EG0cjISBb46NGjA64HU9pE2XwT nx43ftXOnnp6erZ3d2AnjvR96/9y9+6Rfp3jdvuN+2n3EqJFdunWVOdesWrXqj1Wd nOncO8Pd75PNo09Ythw8ddj99WpYvzfGY8eMqV6584/r1XTt3xcfFBQYGSs3r2tQd n8ssgz9ue3bp1P3vG3fOW5669e0qbmWklX7L65+rVHh4euXLmcnd379uvb9/+SZcL npU4I5KPo17uPfHTS0p1xd4+JiTl36aJ2Fu3Nmzb6PvaNjoouV76cVDh9Nyk0GgmB numSQhODc2bMjhw1XvX2bElJmBKr4eNm7XbZyhVlya6lISQi87niNGTWqeo3qqnhV nQmLiwQMHxk+cKN3EpYuXSpYsoa2jI2skn++ufXu1kp4TMHfr5s0379xWFjJowEDf nx4+Vm7Q2b9w4ZtRov6eB0mJ3dG5frUb1uDdxMt3Nzc3J2enu3bvxcfHbd+1U3tjQ nvr51JesPnkPw+NGjOjVr73d1kQ4lNja2omWFKVN/7dw1qb/4sUH94sVLrlm3Vl4P nHTT44cMHR9zc5PXvK1eeO3O2VKlSciDx6tWry5cuuZ87e+zosY6dOy2av6D7zz3D nw8JMTE2VUYbOXDhXrlz5d+/emRgXnz5zZveePcaOHn308JFbXneUCgzo2++Gh8fJ nUyefPn1qW6fuoaNHqteo0aJpM319/ZSaN7CrV6N2rZmzZ5cxLZUvf/5tO7bLxHz5 n8uVO3rkB0gcJgbqQEHw2OeLo36fv76tXfasHer2JjW3VouWYceM+OC0ifl+xslr1 natKAy+ue3bpbVbQeNny4Wgr19fXt1b3Hyj/+Va58+U98y9TJU8LCwxYvXfrBdDlY nk/5FjtQa//RVBiXHd4OEIFNLz4RAdnFTJwSZ+h4CqfaNGzeuXbkqhyT58+dP/wrI nYUVgQMDly5cbNfqxtFnpNGsYExPzNDDw0sWLZc3NPxhR4/O8eP7cz89fDlvaOrYr nUKDAp7wlIjz8kKurHIY0a9489fTXr19L/S9dulS/fv2yf5NwfCzlHoLUCYFyUS+N nANQoUyYEDrZ2F86fz/n/r1L/5t4nvo+JjXE9cjj1HbUpCYG0JsePHevao4eRkdG1 nq1ft6tp4+z4+f+7csMFDXrwK1tXRNTEuPmzE8CHDhkmH0bhho7DQ0OW/r4yKirK1 ns6tWqXIxY+NtO7b7+Pj07dV74pTJbdq2lb3/fXv3tu/QQf7J78mTSlbWO/fuuXD2 n3KNHj/61apVBboOF8+fPmTVb6lP7hx/+U8n37+fPnbt185arHjekQZE2q2vHTvMW nLuzWo/uvk6dIxdZuWF+sWDEpvbKVdb36Dv0HDJA+zN/PP49hnoaNGsmXo4OTc2RE n+LGTJ5v82HjMuLF29eqtWLbcKJ9Rh44dhw8Zut/lwK5du8zMynRq396iguWcefNk ndQYNGFjBqkKffv2kAlKlkyeOb966tWixYikJgbTy8rp4ieLzFy6U7+KYUaMO7Nt/ n38d7yaLF0rDOnjf38ePHyxYvXvxpz0AG1IKEQF0ySEIgZGdRGrQMtSETk+8M++AO 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 nVShXfsLkSd179JDpfk+e2PxQp1Xr1rJ2UrTsxLsePfLg/n27ujZK0TLPcTe37p27 nXPG4YWxsvHTJkr27dj/x8ztw0KVS5crpsB0BBQmBupAQ/FMpJ/eDXgS1aNZMjioW nLlmso60TEBAg+7slTUwszM09ve4ULlLE3sbOwtLitxnTpQ1fs2r16j/+8LzrpSxk n+JCh0qofSW6QN65fP/23ad6+j6VDae/oeO3qtaXLl+UvUCD09WsdHd07XncO7j9w n6NjRPHnyBAYENHCo79ze+YNL75UOZceeXUWKFi1btmwZ01KpRhlqYGVlrUTaI4cN nv3Pn9rETSbHEsaNHO7Rv36Z1m59795KO4N7duy1btz5+7JiFZYVq1aslvEsoYGS0 nYNHClm1am5cyO3/ponm5cnHx8eVKmy1asqR12zbbt27t3r3HggXzBw4aJEv7uXuP nXLlyLVm+zOvOHekvzpw/X8GqwpSJk06eOHH42NHcefIE+EvNHbp26zpsxAjpgEaN nGSPvGj1y5O6du3wD/NN3A0KjkRCoS8ZJCG57eg7s3z9rVr2MuTWjo6MbNWo4LVUU nmjohuOnhERgY2KRpU6n8qZMnZ06ffujo0aOHjyxeuGCvi4u+vr7scteoVXPk6NHS n16xYtnznrl2//TZVWuOqVau6Hjz4559rJ0yYYGNnO2/2bJXq7djx4/IaGd31uuvt n/VCWKQc1ly9dmjh+/J/r18syfby9x4wfl1Nff/Omzdu2bv1t+rR69vYptYqLi/P3 n8xvYf4B0H9WqVcuhr9+/T5+YmFj5U7b15AkTW7Vt4+jkJHNev3Zt8C+/dOjUuXLl nStL3JT3LMXu26tVrZNHOMnfOnPt3723cslkOZ6ytKzZo1NDz1i1ZrzHjxkmt5F3N nmjfv3bePq4vLQZeDU6dNMytjFhwcvGTRYunXTExN4+Pi5BPIlz+/HFXJuqckBFK3 nVf/64/GjR1J/g1y5tm3btnnDRjmkKmFScvmSpSNGjzIwMJCF/NTkJw5GkBoJQaaW ncRICmfLg/n3fx4+/4YN//05i8jmu2j/8kPoxkx8kBEFBQQ/uP9DWziJtaanSSWR9 nb1y/Hhsbq6ubNTIiwrR0KUtLy/CwsEuXLunr5yxe3Pj+/fuyQNXbt1l1dUuUKOHv n7x8WGlqxUqWUewJCQkLk2EG+3rLMkiVLKg+YuXjhgixTTy9bRHh40Mug+g0alCpV nKqVW0gdduXJFfh2FChYyMTWxsLTcs2t3vvz5ChYs+PTp07g3cQ0bNZSuRz586blC nQ8MsLMpLufLhO9Sv7/vYV15LZeJV8ZWrVJH1koK87ni9eRMrG04OfypUqPAy6OUh nV1c5jg0LCw8JCS5QoEDKWB2ykOtXr8nPU/qpV69e1apVq5ixsdZHCYGsfkx0tNQ/ nMiL8RVCQvYNDKVNT6aN9fZ/oaGur3qpq1qol3U2aG4KEAOkjsyYEmUXqhECOLh77 n+ynNaPKz7N+fO3t2zMhR1296yKduVd6i/8ABA375RevTEoKTJ042/fFHz7teSnMp nS5OGr3rlKn+sXt2ydSut5CcVV69c9eN7CGSXese27cpY1Qf27x/Yr/9/TwhktsrW nFaWZ+33VH8oSIiIicufOLe2gNEnH3dy6dOxka2e3c8/uwQN/8fb2/iAhkCa1jInp n2Anj+w8cKC2an59fZStrF1dXOdhIGWXorpfXDzVqXrhyuYKVlbz3/Plzzq3bXrnp nIa25NHzSyHZwbv/w/v3d+/bWqMn3DemEhEBdSAj+qZHDhm/fuWPH9u11bGx8fHw6 nODk/8vFRxcX/1Kzpnv37Hj54aG9r26p16/KWFrExsSdPnJDXTZs1HTp4yLWrV1et nWdOkWVOZp2e3btJ4btm+TfaPe3TpeubMmeW/r2zn6CgT5Z9OnzotDbKZmdm1mx7y nYuTw4T7ePlbW1vny5du0aWOunLnWb9hQKtVVOQ8fPrS3sW3cpEnvPr1fhbzq/fPP n9ezrrd+06c7t253ad5C2elvywwA6ODoFBwev27ixTt2kq3X27d3bv0/fhHcJYRFh ny1es7Deg/5KFiy5fumxV0epN7Bup7ZLlyw7sPzBrxoyhw4ZN+W3q5k2bhg0e0rRZ ns6Urlksvs2zJkv379ts72MfHxxsXN+7cpWvOnDm97tyRrqpv//6/TZ+mk/wkBvmI nlJpv3LixQL58M2bNmjVzhuzc6+royoGE7PQPGznim21LaB4SAnXJOAlBWFjY8qXL nLl28qK+f4e4hSEh4lzWr3shRo2qkOiJLnRDMmTUrSxYdA4OkMzsvXjz3vOW5dsP6 nmJiYAH9/aSflc+jXu0+16tUHD026sWzVv/44e+bM5uSR67SS0uUNri4Hd+5NGslN njjI6tHNasnJ5lSpVli5aHB0dnTefkdb7pJM4np63hgwdOnXKr3PmzZVFycxRUVGO nbdp+MMqQ8Pfz69m9x4JFC5Xz7N06d6lRs4YSA29ct37P3r37DuyXLkkOSeTwZNWf na8zKlNFKDrzLWVgkvHsnr2/duqmjrbPyj39NnTzl5OlT8+fPt7CwDAkJNi1VShll n6M91a02TTxg5tWlrX7++HFudPnVq8oSJu/btLZx8m8XdO159e/VatfZP6RxTEoKg noCDHNm3mzZ9fK/l0T2xsbNtWrcaNn2BRwbJ1ixZ29epNnDw56MULo3z5Uj9tDiAh nyNQyTkIgzYvsD+voaMv2VHsFvlzS+ZwyZRr+2ChlSuqE4MXz5+Hh4copqcePH7uf nOt29Zw85cLhw7nznrl2yZs26e+dO4+IlbO1sZa2lJ73j5dWgQYN3b98WMzZ+eP/B ntevX7O3tTUxNz7qfkRns7OvlyJEj+GWwNOyyTOkRAgICjh9za+vYzufhw5BXr+zs n7LLq6d28efOOp2eDRo1SJwTyu5CauOw/4NCgvrGxsRS9f98+qXzS3W/v37u5uVWo nYGVlnXS66Wlg4EEXF+VJy1m0taVc6VnkWEN+TdIJhgQHOzo7u7u7FylcWLohWUFZ nL+kIXr58efCAS7ly5arXrPHg/n35v1RADkCkS71w/rwcjOTNm1e2tHQ6OXPmqmtr nIxVISQjkC3D1ypXXr17LCurp6Uk3Lavw44+NDfMaymdS18YmW7ZsF89fMC9nXqRo n2o9BJiFA+iAh+LpqVK3avEWLSVOmyC+/XZu21apWlf3geFW835MnLVu3liZDdnAD nXzy/6eFhW6fuwsWLataqZV2xYuMGDcuVL7942V8PzqpQrnzf/v2UQSFaNW9RoECB n1Wv/vHv3btsWrQoVKTRh0iRVfPyz58/Nzc2XLl5iamq6YHHS6BBbNm2W3etTZ92r nVK2aukozp01zOeCydeeOnPr6d+/e69S+/X0fb0NDwye+vtWrVD3pflraSllg2VKl n5yyY79y+vVbyZZhyzDB95gwzszKxSWKcO3SQmk+flXS90ob166Wg6Lg3I4cN9/Ly nUhKC1av+mD9n3sPHj+S71aVjp3Nnz965d1d2rP39/Vs0abp561arita9evQMDnrp ncuSQtNGtWrTo1r27so4zp09fsXSZ37Onq/9YVaduHalPTHR0ofwFfl/1h5JYAOmA nhEBdSAj+KdkBffrsWaGCBY2TLz8JTqadJYuBgUHxEiXi4+P9/PxehbwqUaK4/Hnn n9p2SJiVlZ/rOnTuyJ5pTP2ep0qVCX4f6B/jLTqQsJF/+/F53vLJm1c2ePbtytiUq nKsrfz092KGXPslTp0sp3+9rVq3Fv4iytKshe8hPfJ3IkIPusKVWSQn0fP5YDmgoV nKjzy8YmLi3v79p3sZIfI/ntw8PvERFmOzCbzyK6r7CsrNRePHj16m3RElFi0aNG8 nRkZhoaFyzKAcLJU1Ny9YsKDsIsverRwrydK8H3qr3qrkmKG8hYXybAb51+joaJm5 nWvXqso5ayVehSm8lPYvsiP+n5nFxlhUqJCYkSBdT0sTk9atXr1+/ll9tzpz60oOk n9/aDZiMhUJeMkxBoJV+vI81dhnrQ/V/ev9fNmtXIyCj1tNQJwcL5C4oULVKzZk35 nOHWz6kofIW27tLrh4eFrV6+RtvTcuXNNmzVThjld9fu/3N3dN2/bqozjumHdeteD nLlt37JDOxdvbu3/vPouWLpHjlJXLV+jr57C1s0tapq5Ozly5YmJievfoOXnqr3WT nh3uWfkF2/j9+UrGvr2/vnj/PWzBfOTbp3qVrpcqVhiY/qVj2+U+dPLll+zYp+t7d nu7/0H7D895UWlpbS+0ydNLlpi+ZFihSR4rJl08uVK5dh3rwhwSHz5831e+JXqEjh nufPmSQcnveGQQYNW/ut3OYaS7dWpfYcfGzfu2evn8+fOyTHLhi2biyafdrl+7Zoc nsLR1dBw0ZPDkCROlQ5SVkgp37tBx/ITx9ZLH9JMeRN4+bMTwho0aHTl0ePeuXRER nEXKcolyDBaQgIcjUMk5CIJv10sWLAf4BGfIegqSz5zZ2tsrI/orUCcEZd/csWlmk ncZbpkVHRL54/b+fkKCsrvYzS6u7ft8/430P9XL1yVXbjnTu0V5bjccPjwf17HTt3 n1kq+CHX71q3NW7aUd104f0GlitdP3vOPjol98eJ5nTp1Tp44+VOTn5Rr86Vr2Lp5 n88ejDIWHhe3etbtps6bKefZdO3YYFy+uXOnvceOGl9fdLl27yE9GDl8O7Nvfum2b nfPmSLt495OpaoGBB2U7y+vmLF9pZtKW1P3n8xGPfxz81aVKoUKGY6Gg5ilFGGWrT nrp3S50oFSpcuXbN2benajh9z69i5k3L5v8y2b+/eNm3bFCxUKCUhkL5m6+YtUv8S nJUvKPHK8s2Xj5nr29WSezRs3mZYydahfX+aRgx1luI6PkRAgfZAQfF0/NmgYF/dm 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 n6+atxUuXWFlbh4WGzZox48qVK4uXLq1cpfKObdvmL1gwcMCALt26yaZZuGDh/j17 nZJkREZG/DBrUzsnx1s2bixcuatmqlaGh4f3796QIKb3/gAHKAHGKRz4+XTt1btOu nbY0aNQsVLjTkl0GmpUxnzJ6tq6v768RJtzw9lyxbZmVttXnjRil0yODBnTp31tbW nfhoYOGH8+CePfXPo68uGW7hksYWFxYRx483NyxYqVCgsLNxl//7ps2ddv3Zt7rx5 nw4cO69i5k6en57BBg6pUrTZ+0kSpj8ywaeOmn3v9nJiYGBoaZmJqUtfGRpY8euSo nB/fvL1621NTU1OPGjYXzFzRt0dwob9IVVFu3bO3cpbN8JpvXb2jUuLG2rs6xw0cK nFCwwdvz4b7hlkdGQEGRqJASfTUkI2jk5SQN76eLF27dv29nVK2mSNH6Ov59fSRMT nn4feHjc9uvfoId/VbVu3litXrmKlStmyZbtx/YZ0BCmjDHne8rzr5SWNtrwODw/f nvXNnq9at8xcoILNdu36tbt26pZOvuH/29Gm27NlPnzpVo0aNcuXLy5RXr14d2Lev nQcNGSqEplISgWfNmeQwNk8KJXbuKGRvXTr59QRp5b2/v9h06aCVfmbp3z542bdsa n5csnW8HlgEtkZETDRo3y5Mkjm8bf3196GS8vr/Lly+vo6ISEhOzcsaN58+b58uff ntmVLW0dH5cJcWS+ZoVLlyk+fPj100LW8pYVt8l1oz589P3rkSDvHdrnz5HE7euxd nQkKTpk1iYmJk7arXqGFhaamVPJbd/r17pcTkwYuClGFgj7sdlw+2S7e0R9UmIUD6 nICEAgDSQEKgLCQEAzUFCoC4kBJ8tNDT0/Pnz2bNlb9Cwgba2dnx8/Ak3N1npt29V nNWrWLFqs2JMnT+7cvhMdE21nZ1esWLG9e/baO9jLZ+Ke/BB74+LGVapWff3q9blz nZ5Vbh6tVr+7m5qaKj9fV0W3QqKGuru67dwlubsfeJySq3qqqVKmqnKO57Xn73l0v nPb1sNrY2Xl5eUVHRUoHUY1NERkaeP3dOCvqpSZPbt28/eeyb+D6xrk3S4xz/KrpE n8SpVqhw7elQOTWViw0aNlPGOnj9/fvXyZd2sWeW99g4OskyPG0mnmaQmMmfVatXN nypgdOXw4ISFBL6teo8Y/3rhx49nTp4kJiXVs6ip3Kku5z589T0xMKFW6tHwISn1u n3bzp7eNT0bqiebmkqzi97iSRJdjY2d6/ey86Orpy1Sq3PG6+eRMrX8bsObJLtTPi nsyjw7ZAQZGokBJ9N2uS9e/fa2thaWVslvEs44+7u4+2dLUd26W5sbGwsLC1ve3pe nvnTJrl49WevAwMAsWllMTE1KmpjInNIUN2/RvFDhwvJldj99OjAgsHmLFkWKFpFO n4dzZs7Vr165cpYp8MvL63t170vDGx8XXql1bCpJCL5w/b2lpmT17juCXLz09Pa0r nWss/pR5P+/Xr1zu3b69gZVXM2Di3gcFBFxcjI6OklFdb+8Tx4y+ev5CyChUuJI3/ n+QsX6tSpU6lSJfkFRYRHHDt2NDwsLPk5EFmaNm9WsGBBt6PHChQskCtXrjdxcXe9 nvH5s3Fi6lTNnz9rUrVuxUqWgoKCDB1yKGReTLilp2O27d2963Kxes4bU/E1sbB5D nQ1NTU1mydEwhISHNmzfPa2Qkb5eeqLyFRY4cOWTirVu3KleuLJ/JzRseZc3LZtHW n9n7wUHq3eg72aX7mJARIHyQEAJAGEgJ1ISEAoDlICNSFhABABkdCkKmREHy2N7Gx nfv7+ujq6ynDWskY+3t4yXVasePHiuXPnDgsLC3oRpFLFm5qa5s6T566XlzL+/hNf nX5k/T548RYsVi42J9fN7In/K/MWMjR/5+MinpK2tbVamjPxXPiIfH5/3iYnyaRUr nVswwb9II20EvXgQHB+vo6JiYmr4MCoqPV0kFUj/eOT4+3u/JE/lVmJubBwUFhb0O nfa/1vqSJiSzwr6INDYsWLSq1lTpr6+iUKVNG+QVFRkYGBgTq6GjLe0uXLi3LfP7s n2avXr5NqkpAg1cuXL9/Dhw+lPlJ6mbJl5V8jIiJkC8rClcGF/Pz8oiIjZUpeI6OU npzq/eP781atXhYsUUbJqqfPLly+lXFMTk5fBwap4VdFiRWWet2/fyTdFV1fXvFy5 nv/tFkxAgfZAQAEAaSAjUhYQAgOYgIVAXEgIAGRwJQaZGQoBMhIQA6YOEAADSQEKg nLiQEADQHCYG6kBAAyOBICDI1EgJkIiQESB8kBACQBhICdSEhAKA5SAjUhYQAQAZH nQpCpfZOEQFv7PAkBPkPqhCAxsS4JAb4SEgIASAMJgbqQEADQHCQE6kJCACCDIyHI n1NI5IZCtFp9MpVLJn4nJ1F4cvlfayXR1dfX09LIly5o1KwkB1I6EAADSQEKgLiQE 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&#34;/&gt;&lt;/p&gt; n&lt;p&gt;Fig. 3: Our &amp;#xfb01;gure analyzer &amp;#xfb01;rst parses the &amp;#xfb01;gure axes, then the legend contents, and &amp;#xfb01;nally extracts and associates the plotted data to their legend entries.&lt;/p&gt; n&lt;p&gt;a straight line (representing the axis tick labels). More speci&amp;#xfb01;cally, the&lt;i&gt; y&lt;/i&gt;-axis (or &lt;i&gt;x&lt;/i&gt;-axis) is determined by detecting the largest number of (numeric) text boxes that all share a common&lt;i&gt; x&lt;/i&gt; (or&lt;i&gt; y&lt;/i&gt;) pixel coordinate, breaking ties by choosing the leftmost qualifying&lt;i&gt; x&lt;/i&gt; (or&lt;i&gt; y&lt;/i&gt;) coordinate. Each axis is almost always associated with a textual label that helps towards the interpretation of the graphical plot (e.g., the label &amp;#x2018;Precision&amp;#x2019; for&lt;i&gt; y&lt;/i&gt;-axis in &amp;#xfb01;gure. 3). Given the common convention of placing the axis label in the immediate vicinity of the axis-tick labels, we detect the&lt;i&gt; y&lt;/i&gt;-axis label by identifying the rightmost textbox to the left of the&lt;i&gt; y&lt;/i&gt;-axis tick labels, and the&lt;i&gt; x&lt;/i&gt;-axis label by &amp;#xfb01;nding the highest textbox below the&lt;i&gt; x&lt;/i&gt;-axis tick labels. While most plots use a linear axis scale, it is not uncommon for &amp;#xfb01;gures to have a logarithmic scale. Therefore we determine the axis scale (linear, logarith- mic) by &amp;#xfb01;tting separate regressors [27] (linear and exponential link functions) to model the data values, and then pick the model with the lowest deviance under a threshold. The regressors map the axis tick label values to their corresponding pixel coordinate values. These models are in turn used for transforming all the plotted data from their pixel-coordinate scale to their data-coordinate scale.&lt;/p&gt; n&lt;p&gt;&lt;b&gt;Parsing Legend&lt;/b&gt; Graphical plots always use a legend as a guide to the symbols used when plotting multiple variables. Typically the legend has entries consisting of (&lt;i&gt;label&lt;/i&gt;,&lt;i&gt; symbol&lt;/i&gt;) pairs, where the labels are the variable names (e.g., &amp;#x2018;classi&amp;#xfb01;er only&amp;#x2019; in &amp;#xfb01;gure. 3) and the symbols give an example of its appearance. As high- lighted in section. 1, there is huge variation in the placement and format of legends across &amp;#xfb01;gures. Legend entries may either be arranged vertically, horizon- tally, or in a rectangle, and they may be found either outside the plot area or anywhere inside (see illustration in supplementary). Further, the legend symbols may be placed either to the right or left of the legend labels, and may have vary- ing lengths with spaces (e.g. the dashed symbol for &amp;#x2018;classi&amp;#xfb01;er only&amp;#x2019; in &amp;#xfb01;gure. 3). To address this challenge, our legend parser &amp;#xfb01;rst identi&amp;#xfb01;es the legend labels, and then locates their corresponding symbols. We pose the problem of legend label identi&amp;#xfb01;cation as a text classi&amp;#xfb01;cation problem, i.e., given a text box within the &amp;#xfb01;gure, is it a legend label or not? For classi&amp;#xfb01;cation, we use a random-forest classi&amp;#xfb01;er [28] with each textbox represented using a six-dimensional feature&lt;i&gt; f&lt;/i&gt; =&lt;i&gt; {&lt;/i&gt;&lt;i&gt;t&lt;/i&gt;&lt;i&gt;x&lt;/i&gt;&lt;i&gt;, t&lt;/i&gt;&lt;i&gt;y&lt;/i&gt;&lt;i&gt;, t&lt;/i&gt;&lt;i&gt;l&lt;/i&gt;&lt;i&gt;, t&lt;/i&gt;&lt;i&gt;n&lt;/i&gt;&lt;i&gt;, t&lt;/i&gt;#&lt;i&gt;v&lt;/i&gt;&lt;i&gt;, t&lt;/i&gt;#&lt;i&gt;h&lt;/i&gt;&lt;i&gt;}&lt;/i&gt;, where&lt;i&gt; t&lt;/i&gt;&lt;i&gt;x&lt;/i&gt;&lt;i&gt;, t&lt;/i&gt;&lt;i&gt;y&lt;/i&gt; refer to the normalized&lt;i&gt; x, y&lt;/i&gt; center coordinates of the text box,&lt;i&gt; t&lt;/i&gt;&lt;i&gt;l&lt;/i&gt; is the text string length, &lt;i&gt;t&lt;/i&gt;&lt;i&gt;n&lt;/i&gt; is a Boolean indicating the text string to be numeric or not, and&lt;i&gt; t&lt;/i&gt;#&lt;i&gt;v&lt;/i&gt;&lt;i&gt;, t&lt;/i&gt;#&lt;i&gt;h &lt;/i&gt;denote the number of other vertically and horizontally aligned textboxes.&lt;/p&gt; n&lt;/div&gt; n&#39; . Search for Text . rectangles = page.searchFor(&#39;We&#39;, hit_max = 16) rectangles . [Rect(211.26063537597656, 224.10699462890625, 222.6080322265625, 234.06959533691406), Rect(187.97801208496094, 273.7499694824219, 199.31546020507812, 283.71258544921875), Rect(291.99755859375, 297.3489685058594, 303.3349914550781, 307.31158447265625), Rect(48.959983825683594, 502.8319396972656, 62.79803466796875, 512.7945556640625), Rect(94.06057739257812, 526.4309692382812, 105.39801788330078, 536.3935546875)] . More Features... . PDF Maintenance: can only modify in PDF format, first convert to PDF using doc.convertToPDF(), after modifying, save to disk with doc.save(). | Join &amp; Split PDF documents | Modify, Create, Re-arrange &amp; Delete PDF pages | Embed arbitrary data (similar to ZIP files) | .",
            "url": "https://dcato98.github.io/blog/jupyter/python/quick-demo/2020/06/05/PDFs-In-Python-using-PyMuPDF.html",
            "relUrl": "/jupyter/python/quick-demo/2020/06/05/PDFs-In-Python-using-PyMuPDF.html",
            "date": " • Jun 5, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "CUDA-Accellerated Julia Fractals",
            "content": "The Plan . In the first section, you&#39;ll learn how to generate impressively cool images like this one, commonly named the Mandelbrot set, both in NumPy and in PyTorch. . In the second section, you&#39;ll speed up your image generation by over a factor of 10, learning about broadcasting and the speedups that come from maxing out the GPU. . In the third section, you&#39;ll generate mesmerizing videos exploring the very fabric of Julia fractal-space. . . Above: The Mandelbrot set, which you&#39;ll be able to generate yourself by the end of Part 1. . Hang on...what is a Julia fractal? . Steven Wittens does an incredible job of showing what a Julia set is in his post How to Fold a Julia Fractal. If you need a refresher on Julia sets, or just want to marvel at Witten&#39;s impressive ability to build intuition through evocative visualizations, I suggest you take a few minutes to check it out now. Then return when you&#39;re ready to start coding. . Part 1: From Math to Code . A Julia fractal is computed by iteratively applying a function over a set of points in the complex plane. Mathematically, this looks like: . $$ z_{n+1} = f_n(z_n, c) $$ . Where $ f $ is a complex, non-linear function (i.e. map) and $ z_0 $ and $ c $ are both complex numbers. . By applying these maps iteratively over the points in the complex plane, the points that diverge to infinity are excluded from the Julia set. Those that don&#39;t diverge are part of the set. . Defining the complex plane . Let&#39;s get started defining the region of the complex plane we want to plot (xrange and yrange), as well as the resolution of our image. . xrange = yrange = (-2, 2) resolution = (5, 5) # (x-resolution, y-resolution) . Each point corresponds to one pixel, so in this case, we&#39;ll end up with a 5x5 pixel image with 25 points evenly spaced in the grid defined by the real x-axis ranging from -2 to 2, and the imaginary y-axis ranging from -2i to 2i. . This fully specifies our complex plane. Let&#39;s create this with NumPy: . import numpy as np def np_complex_plane(xrange=(-2,2), yrange=None, res=1024): &#39;&#39;&#39;Return a grid of points on the complex plane.&#39;&#39;&#39; # conveniences to simplify parameters if yrange == None: yrange = xrange # default: y-range = x-range if type(res) == int: res = (res,res) # default: x-resolution = y-resolution # define the x and y axis values on the (not yet) complex plane x = np.linspace(xrange[0], xrange[1], res[0]) # indexed backwards because images are indexed in the opposite direction on the y axis vs. the coordinate plane y = np.linspace(yrange[1], yrange[0], res[1]) # get a grid of points corresponding to the x (real) and y (complex) axis values real_plane, imag_plane = np.meshgrid(x, y) # convert points to complex numbers cplane = real_plane + 1j*imag_plane return cplane . Testing this complex plane generating function, we see that it matches our expectations. . np_complex_plane(xrange, yrange, resolution) . array([[-2.+2.j, -1.+2.j, 0.+2.j, 1.+2.j, 2.+2.j], [-2.+1.j, -1.+1.j, 0.+1.j, 1.+1.j, 2.+1.j], [-2.+0.j, -1.+0.j, 0.+0.j, 1.+0.j, 2.+0.j], [-2.-1.j, -1.-1.j, 0.-1.j, 1.-1.j, 2.-1.j], [-2.-2.j, -1.-2.j, 0.-2.j, 1.-2.j, 2.-2.j]]) . Converting this from NumPy to PyTorch is trivial. Because CUDA doesn&#39;t support complex numbers yet, we&#39;ll have to keep track of the real and imaginary values of the coordinates separately. . import torch def torch_complex_plane(xrange=(-2,2), yrange=None, res=1000): &#39;&#39;&#39;Return a 2-tuple of grids corresponding to the real and imaginary points on the complex plane, respectively.&#39;&#39;&#39; if yrange == None: yrange = xrange if type(res) == int: res = (res,res) # np.linspace(...) --&gt; torch.linspace(...).cuda() x = torch.linspace(xrange[0], xrange[1], res[0]).cuda() y = torch.linspace(yrange[1], yrange[0], res[1]).cuda() # np.meshgrid --&gt; torch.meshgrid real_plane, imag_plane = torch.meshgrid(x,y) cplane = tuple([real_plane.transpose(0,1), imag_plane.transpose(0,1)]) return cplane . Note the slight difference in the way we represent the complex plane in PyTorch compared to NumPy, above. The first element in the tuple is the real value of the point in the complex plane, the second is the imaginary value. . torch_complex_plane(xrange, yrange, resolution) . (tensor([[-2., -1., 0., 1., 2.], [-2., -1., 0., 1., 2.], [-2., -1., 0., 1., 2.], [-2., -1., 0., 1., 2.], [-2., -1., 0., 1., 2.]], device=&#39;cuda:0&#39;), tensor([[ 2., 2., 2., 2., 2.], [ 1., 1., 1., 1., 1.], [ 0., 0., 0., 0., 0.], [-1., -1., -1., -1., -1.], [-2., -2., -2., -2., -2.]], device=&#39;cuda:0&#39;)) . Defining divergence . Now that we have our complex plane, we need to know how to detect whether a point has diverged. This will determine what color we plot it. . Of course, we don&#39;t have an infinitely sized numeric data type to determine whether a point has &#39;reached infinity&#39; yet. On top of this, we don&#39;t have an infinite amount of time to find out whether each point exceeds this bound. . One way to approximate this is to count how many iterations it takes before a point exceeds a specified divergence_value, up to a fixed number of iterations, n_iterations. . divergence_value = 2 n_iterations = 50 . n_iterations is an especially convenient parameter because it directly manages our tradeoff between time and accuracy. More iterations take longer to compute, but result in higher quality maps. . Choosing a mapping function . Now that we know how to count convergence, we just need to choose a map. Let&#39;s recall our generating function: . $$ z_{n+1} = f_n(z_n, c) $$ . We&#39;ll spend most of our time here working with the most popular function for generating Julia fractals, the quadratic map: . $$ f(z) = z^2 + c $$ . Two other popular choices are the sine map (implemented at the very end) and cosine map (left as an exercise for the reader): . $$ f(z) = c * sin(z) $$ $$ f(z) = c * cos(z) $$ . Let&#39;s start by implementing the quadratic map in NumPy: . def np_quadratic_method(c, z, n_iterations, divergence_value): &#39;&#39;&#39;Iteratively apply the quadratic map `z = z^2 + c` for `n_iterations` times c: constant complex value z: initial complex values &#39;&#39;&#39; # initialize matrix of counters stable_steps = np.zeros_like(z, dtype=np.int32) for i in range(n_iterations): # mask keeps track of the points that have not diverged yet mask = np.less(np.abs(z), divergence_value) # increment counter for all points that haven&#39;t diverged yet stable_steps += mask # do one iteration of the function # (for performance, only update the points that haven&#39;t diverged yet) try: # update z when c is a matrix of complex numbers z[mask] = z[mask]**2 + c[mask] except: # update z when c is a single complex number z[mask] = z[mask]**2 + c # normalize values to the range [0,1] return stable_steps / n_iterations . Finally, to visually verify our model, let&#39;s choose a value for c for which the image is already known. Paul Bourke lists of some particularly interesting on his website. I like $ c = 0.54 + 0.54i $, which, according to Bourke&#39;s website, looks like this: . . c = -0.54 + 0.54j z_init = np_complex_plane(xrange, yrange, resolution) img = np_quadratic_method(c, z_init, n_iterations, divergence_value) img . array([[0. , 0. , 0. , 0. , 0. ], [0. , 0.04, 0.06, 0.02, 0. ], [0. , 0.08, 1. , 0.08, 0. ], [0. , 0.02, 0.06, 0.04, 0. ], [0. , 0. , 0. , 0. , 0. ]]) . Plotting a Julia set . This is difficult to inspect by eye. Let&#39;s write a function to plot these values. By experimentation, I&#39;ve found that plotting the negative log of the returned values usually gives a nice contrast of values. eps controls the sensitivity to values very close to zero. . import matplotlib.pyplot as plt def np_plot_julia(julia_img, sz=16, eps=.1): img = -np.log(julia_img + eps) plt.figure(figsize=(sz,sz)) plt.imshow(img) plt.show() . np_plot_julia(img, sz=6) . Hmm...looks like we don&#39;t have enough resolution to get a clear picture. . resolution = 64 c = -0.54 + 0.54j z_init = np_complex_plane(xrange, yrange, resolution) img = np_quadratic_method(c, z_init, n_iterations, divergence_value) np_plot_julia(img, sz=6) . This is looking promising! Let&#39;s increase the resolution even further, and make the image bigger for a better comparison. . resolution = 1024 c = -0.54 + 0.54j z_init = np_complex_plane(xrange, yrange, resolution) img = np_quadratic_method(c, z_init, n_iterations, divergence_value) np_plot_julia(img, sz=12) . We&#39;re starting to get very close to the original, but we&#39;re lacking in detail. Let&#39;s increase how many iterations we do from 50 to 200 iterations. . n_iterations = 200 c = -0.54 + 0.54j z_init = np_complex_plane(xrange, yrange, resolution) img = np_quadratic_method(c, z_init, n_iterations, divergence_value) np_plot_julia(img, sz=12) . Looks like the same fractal to me! . And along the way, we&#39;ve seen how to improve the quality of our generated images by increasing the image resolution and/or increasing the number of iterations. . Accelerating the quadratic map . Okay, now that it looks like we&#39;ve got the NumPy implementation correct, let&#39;s reimplement the quadratic map in PyTorch. . def torch_complex_magnitude(r,i): &#39;&#39;&#39;returns the magnitude of a complex tensor, given a real component, `r`, and an imaginary component, `i`&#39;&#39;&#39; return torch.sqrt(r**2+i**2) def torch_quadratic_method(c, z, n_iterations, divergence_value): &#39;&#39;&#39;Iteratively apply the quadratic map `z = z^2 + c` for `n_iterations` times c: tuple of the real and imaginary components of the constant value z: tuple of the real and imaginary components of the initial z-value &#39;&#39;&#39; # np.zeros_like(...) --&gt; torch.zeros_like(...).cuda() stable_steps = torch.zeros_like(z[0]).cuda() for i in range(n_iterations): # numpy handled squaring complex magnitudes, for PyTorch we implement this ourselves mask = torch.lt(torch_complex_magnitude(*z), divergence_value) stable_steps += mask.to(torch.float32) # likewise, we manually implement one iteration of the quadratic map z = (z[0]**2-z[1]**2 + c[0], # real 2*z[0]*z[1] + c[1]) # imaginary # don&#39;t forget to put the array onto the cpu for plotting! return (stable_steps / n_iterations).cpu() . It&#39;s trivial to convert our plotting function from NumPy to PyTorch: . def torch_plot_julia(julia_img, sz=16, eps=.1): # np.log --&gt; torch.log img = -torch.log(julia_img + eps) plt.figure(figsize=(sz,sz)) plt.imshow(img) plt.show() . Now let&#39;s replicate the spiral fractal using our PyTorch code . resolution = 1024 # As before, note the change from using the built-in complex data type, which NumPy can handle # to using the convention: [real, imaginary], which we manually handle using PyTorch c = [-0.54, 0.54] z_init = torch_complex_plane(xrange, yrange, resolution) img = torch_quadratic_method(c, z_init, n_iterations, divergence_value) torch_plot_julia(img, sz=12) . Nice! Looks identical to our NumPy version. . So we used a constant value for c to create this image, but the famous Mandelbrot set is generated by varying c, setting it equal the complex plane. That is, c varies for each point in the plane, so that c is equal to the coordinate at that point. . We can actually already do this, using the same function we use to initialize the complex plane! Let&#39;s test it out: . # Mandelbrot set c = torch_complex_plane(xrange, yrange, resolution) z_init = torch_complex_plane(xrange, yrange, resolution) img = torch_quadratic_method(c, z_init, n_iterations, divergence_value) torch_plot_julia(img, sz=6) . Although it is perhaps not as striking as the image of the Mandelbrot set on Wikipedia (see below), it looks like we&#39;ve successfully replicated it! . . Part 2: Broadcasting - From One to Many . This tiny change illustrates the power of broadcasting. Broadcasting is what makes this so amazingly efficient. If you&#39;ve never heard of broadcasting, here&#39;s a good place to review it. Skip to the section on &#39;Broadcasting Rules&#39; if just need a quick refresher. Take all the time you need, I&#39;m not going anywhere. . Good? Good. . Updating the data model . So, what area is a good candidate for speeding up? We can&#39;t easily parallelize the calculation of an image any further due to the iterative nature of the calculation. However, we can compute multiple images in parallel. . Right now, we&#39;re generating 1 image, in 2 dimensions (x, y). This is defined by our variable, resolution, and is reflected in the shape of our constant, c, and $ z_0 $ , z_init. . resolution, c[0].shape, z_init[0].shape . (1024, torch.Size([1024, 1024]), torch.Size([1024, 1024])) . One way to do this is to vary our complex constant, c, generating multiple images. For example, we can add a new dimension in front, describing how many images to calculate at once, sampling c along the complex plane. I&#39;ll refer to this as the grid of images. . I&#39;ll demonstrate this directly in PyTorch to get the immediate speed advantages, although it is straightforward to transcribe into NumPy. . # number of images in x and y directions grid_resolution = 5 # sample c evenly between these values grid_xrange = grid_yrange = [-2, 2] # number of pixels in each image image_resolution = 64 # range of complex valued points in each image image_xrange = image_yrange = [-2, 2] # take note the dimensions here c_real, c_imag = [ri.reshape(grid_resolution, grid_resolution, 1, 1) for ri in torch_complex_plane(grid_xrange, grid_yrange, grid_resolution)] # take note of the dimensions here z_real, z_imag = [ri.reshape(1, 1, image_resolution, image_resolution) for ri in torch_complex_plane(image_xrange, image_yrange, image_resolution)] c_real.shape, z_real.shape . (torch.Size([5, 5, 1, 1]), torch.Size([1, 1, 64, 64])) . Now look at the resulting shape when we add c to z: . (c_real + z_real).shape . torch.Size([5, 5, 64, 64]) . The way to interpret this is that we&#39;re broadcasting the initialization of the complex plane, z, across every individual value of c, effectively representing a 5x5 grid of images, each with dimension 64x64. The image at [0,0,:,:] will represent the top-left-most value of c, which according to grid_xrange and grid_yrange is $ c = -2 + 2i $. . If you don&#39;t follow this yet, don&#39;t worry! Note your confusion, continue reading, and circle back after seeing what we&#39;re going to do with this. This is not easy to follow, but I ask that you please trust me, we&#39;re nearly there and it will all make sense very soon. . Let&#39;s generalize the creation of c and z. . def make_cz_grids(grid_res, img_res, grid_x_rng=(-2,2), grid_y_rng=(-2,2), img_x_rng=(-2,2), img_y_rng=(-2,2)): if type(grid_res) == int: grid_res = (grid_res, grid_res) if type(img_res ) == int: img_res = (img_res , img_res ) c = [x.reshape(grid_res[0],grid_res[1],1,1) for x in torch_complex_plane(grid_x_rng, grid_y_rng, grid_res)] z = [x.reshape(1,1,img_res[0],img_res[1]) for x in torch_complex_plane(img_x_rng, img_x_rng, img_res)] return c,z . c, z = make_cz_grids(grid_resolution, image_resolution) (c[0] + z[0]).shape . torch.Size([5, 5, 64, 64]) . Now that we&#39;ve updated our variables, let&#39;s update our method. Note that, because of broadcasting, we only need to change one line of code. . Updating the iteration method . I suggest you take a moment to read through this function to convince yourself that this will work. . def torch_quadratic_method(c, z, n_iterations, divergence_value): &#39;&#39;&#39;Iteratively apply the quadratic map `z = z^2 + c` for `n_iterations` times c: tuple of the real and imaginary components of the constant value z: tuple of the real and imaginary components of the initial z-value &#39;&#39;&#39; # add c[0] to get the right shape stable_steps = torch.zeros_like(c[0] + z[0]).cuda() for i in range(n_iterations): mask = torch.lt(torch_complex_magnitude(*z), divergence_value) stable_steps += mask.to(torch.float32) z = (z[0]**2-z[1]**2 + c[0], # real 2*z[0]*z[1] + c[1]) # imaginary return (stable_steps / n_iterations).cpu() . This is but a small taste of the power and the beauty of broadcasting. Once we set up an appropriate data model, we get parallelization for free. . Time to test this out. . n_iterations = 50 c, z = make_cz_grids(grid_resolution, image_resolution) imgs = torch_quadratic_method(c, z, n_iterations, divergence_value) imgs.shape . torch.Size([5, 5, 64, 64]) . This is the output shape we expected. Now let&#39;s plot these images! . Plotting a grid of Julia sets . def torch_plot_julia_grid(images, figsize=(12,12)): rows, cols = images.shape[:2] fig, axs = plt.subplots(rows, cols, figsize=figsize) for i in range(rows): for j in range(cols): axs[i,j].imshow(images[i,j]) axs[i,j].get_xaxis().set_visible(False) axs[i,j].get_yaxis().set_visible(False) plt.show() . torch_plot_julia_grid(imgs) . This is a start, but it&#39;s not quite clear yet whether we&#39;ve actually done it right. Let&#39;s try increasing the resolution of our grid and zoom in on the appropriate region. . # this is the main region where the Mandelbrot set exists # and also happens to be where the Julia sets are connected grid_x_rng = (-1.5, 0.5) grid_y_rng = (-1, 1) grid_resolution = 21 image_resolution = 512 c, z = make_cz_grids(grid_resolution, image_resolution, grid_x_rng=grid_x_rng, grid_y_rng=grid_y_rng) imgs = torch_quadratic_method(c, z, n_iterations, divergence_value) torch_plot_julia_grid(imgs, figsize=(16,16)) . This looks pretty good! . And what does one of these images look like? . x = 15 y = 2 print(f&#39;c = {c[0][y][x][0][0]:0.3f} + {c[1][y][x][0][0]:0.3f}i&#39;) torch_plot_julia(imgs[y, x], sz=8) . c = 0.000 + 0.800i . This particular Julia set ($ c = 0 + 0.8i $) is also on Bourke&#39;s website. Let&#39;s compare: . . Looks like I probably mixed up my axes somewhere, causing a problem with symmetry. Maybe I&#39;ll get to fixing this someday. If you happen to spot it, let me know where I went wrong! (tweet me: @dcato98) . Now that you&#39;ve seen what we can do with broadcasting, this a good time to go back to the beginning of the section and review the changes necessary to make this work. . Finally, I promised you we&#39;d make a video to visualize the Julia fractal in another way. Let&#39;s get to work. . Part 3: Visualizing the Julia set as a video . To create the video we&#39;ll be using ffmpeg. If you want to follow along with this section, make sure you have it installed. I&#39;d suggest a link, but installation varies across platforms so I&#39;ll leave you to search for instructions relevant to your situation. . Preparing the video frames . For this video, let&#39;s visualize varying c along the real x-axis, holding the imaginary y-axis constant at 0.25i. . First, we&#39;ll use the code we&#39;ve already written to generate our frames. If your GPU runs out of memory at this point, try decreasing either the image resolution or the number of frames. . One way to get around this and create large videos at high quality would be to create and save the images in smaller batches before creating video (don&#39;t forget to name the frames in sequence!). . # vary the c-values along the x-axis grid_x_rng = (-1.5, 0.5) # hold the y-axis constant grid_y_rng = (0.25, 0.25) # define number of frames grid_resolution = (120, 1) # image quality parameters image_resolution = 1024 n_iterations = 200 c, z = make_cz_grids(grid_resolution, image_resolution, grid_x_rng, grid_y_rng) imgs = torch_quadratic_method(c, z, n_iterations, divergence_value) # temporarily reshape our images into a square grid to easily visualize our frames torch_plot_julia_grid(imgs.reshape(10,12,image_resolution, image_resolution), figsize=(16,16)) . Looks good. Now let&#39;s smoosh together the grid, treating imgs as a list, not a grid, of images. . imgs = imgs.reshape(-1, image_resolution, image_resolution) imgs.shape . torch.Size([120, 1024, 1024]) . Next let&#39;s set up our file paths. . We need a working directory, path, a subfolder in this location for saving a the list of images, frame_folder, and a filename which we&#39;ll name the video, video_fn. . from pathlib import Path # set this to your preferred working directory path = Path(&#39;/home/dc&#39;) frame_folder = path / f&#39;julia_frames&#39; # save the video here # video_fn = path / &#39;julia_visualization.mp4&#39; # for some reason, I couldn&#39;t play .mp4 files in the notebook video_fn = path / &#39;julia_visualization.webm&#39; # MUCH slower to convert, also it looks like it might be resolution, try mp4 first # create the frame folder frame_folder.mkdir(exist_ok=True, parents=True) . # save images into the frame folder, this can take a while for i, img in enumerate(imgs): fig = plt.figure(figsize=(16,16)) plt.imshow(img) # turn off axis ticks plt.xticks([]) plt.yticks([]) # save image to `frame_folder` directory plt.savefig(frame_folder / f&#39;julia_{i:08d}.png&#39;) # prevent plot from displaying in notebook, also reduces memory use plt.close(fig) . Creating a video . # set the frame rate fps = 30 # fps=frames per second # change working directory to the frame folder old_wd = Path.cwd() frame_folder.cwd() image_path_format = frame_folder / &#39;julia_%08d.png&#39; # create video #! ffmpeg -r $fps -i $image_path_format -pix_fmt yuv420p -y $video_fn ! ffmpeg -r $fps -i $image_path_format -y $video_fn # return to old working directory old_wd.cwd() . ffmpeg version 4.0 Copyright (c) 2000-2018 the FFmpeg developers built with gcc 7.2.0 (crosstool-NG fa8859cb) configuration: --prefix=/home/dc/anaconda3/envs/fastai --cc=/opt/conda/conda-bld/ffmpeg_1531088893642/_build_env/bin/x86_64-conda_cos6-linux-gnu-cc --disable-doc --enable-shared --enable-static --enable-zlib --enable-pic --enable-gpl --enable-version3 --disable-nonfree --enable-hardcoded-tables --enable-avresample --enable-libfreetype --disable-openssl --disable-gnutls --enable-libvpx --enable-pthreads --enable-libopus --enable-postproc --disable-libx264 libavutil 56. 14.100 / 56. 14.100 libavcodec 58. 18.100 / 58. 18.100 libavformat 58. 12.100 / 58. 12.100 libavdevice 58. 3.100 / 58. 3.100 libavfilter 7. 16.100 / 7. 16.100 libavresample 4. 0. 0 / 4. 0. 0 libswscale 5. 1.100 / 5. 1.100 libswresample 3. 1.100 / 3. 1.100 libpostproc 55. 1.100 / 55. 1.100 Input #0, image2, from &#39;/home/dc/julia_frames/julia_%08d.png&#39;: Duration: 00:00:04.80, start: 0.000000, bitrate: N/A Stream #0:0: Video: png, rgba(pc), 1152x1152 [SAR 2834:2834 DAR 1:1], 25 fps, 25 tbr, 25 tbn, 25 tbc Stream mapping: Stream #0:0 -&gt; #0:0 (png (native) -&gt; vp9 (libvpx-vp9)) Press [q] to stop, [?] for help [libvpx-vp9 @ 0x55bab7fa2fc0] v1.7.0 Output #0, webm, to &#39;/home/dc/julia_visualization.webm&#39;: Metadata: encoder : Lavf58.12.100 Stream #0:0: Video: vp9 (libvpx-vp9), yuva420p, 1152x1152 [SAR 1:1 DAR 1:1], q=-1--1, 200 kb/s, 30 fps, 1k tbn, 30 tbc Metadata: encoder : Lavc58.18.100 libvpx-vp9 Side data: cpb: bitrate max/min/avg: 0/0/0 buffer size: 0 vbv_delay: -1 frame= 120 fps=1.2 q=0.0 Lsize= 111kB time=00:00:03.96 bitrate= 228.6kbits/s speed=0.0402x video:100kB audio:0kB subtitle:0kB other streams:0kB global headers:0kB muxing overhead: 10.341538% . PosixPath(&#39;/home/dc/git/blog/_notebooks&#39;) . Playing our video . This needs no explanation. Sit back and enjoy :) . from ipywidgets import Video Video.from_file(video_fn) . . And there you have it! This is a visualization of the Julia set when $ c = r + 0.25i $ where $ r epsilon[-1.5, 0.5] $. . What&#39;s next? . There are so many fun directions to go from here! Here&#39;s a few ideas: . Colorization: Try experimenting with different thresholds, multiple colors, etc... A quick google search turns up many amazing examples. Can you replicate these? Can you invent your own? | Map: There&#39;s nothing inherently special about the quadratic map. It&#39;s well studied, but try exploring fractals made from another map. | Video: Instead of updating c in a line, consider updating c to travel in a circle or other continuous curve. Or, continuously zoom in on a particularly interesting patch. | 3D: Our image grid and video are 2 ways to try to grasp the shape of a 4D object. What would this object look like in 3D (say, by holding the real or imaginary component of c constant). Then, create a video of the 3D object as you travel along the 4th dimension. | Batching: Occasionally when I wrote this, I experimented with large parameters which caused the GPU to run out of memory (e.g. when creating the video) and requiring the notebook to be restarted - batching what gets sent to the GPU could prevent this from happening. | . For a bit of inspiration, here&#39;s an example of experimenting with colorization and maps to generate &quot;electric christmas trees&quot; Set is(see image below) generated using the Sine map! . First, I&#39;ve refactored our code a bit to make our Julia generator and plotting functions more generic: . # implement the quadratic and Sine maps for complex numbers def torch_quadratic_map(c, z): return (z[0]**2-z[1]**2 + c[0], 2*z[0]*z[1] + c[1]) # modify our quadratic julia method to generalize to any mapping function def torch_julia_generator(c=None, z=None, n_iterations=50, divergence_value=50, map_func=torch_quadratic_map): &#39;&#39;&#39;A generic julia fractal generator (defaults produce the Mandelbrot set).&#39;&#39;&#39; if c is None: c = torch_complex_plane() if z is None: z = torch_complex_plane() stable_steps = torch.zeros_like(c[0]+z[0]).cuda() for i in range(n_iterations): mask = torch.lt(z[1].abs(), divergence_value) stable_steps += mask.to(torch.float32) z = map_func(c, z) return (stable_steps / n_iterations).cpu() # add `transform_func` to our standard plotting function to accept arbitrary image transformations def torch_plot_julia(julia_img, sz=16, eps=.1, transform_func=None): img = -torch.log(julia_img + eps) if transform_func is None else transform_func(julia_img) plt.figure(figsize=(sz,sz)) plt.imshow(img) plt.show() . Testing the default Julia generator: . torch_plot_julia(torch_julia_generator()) . Now, we implement the Sine map. Look how easy this is with our newly refactored code! . # implementing the Sine map in PyTorch def torch_complex_mult(ar,ai,br,bi): return (ar*br-ai*bi, ar*bi+ai*br) def torch_complex_sin(r,i): return (torch.sin(r)*torch.cosh(i), torch.sinh(i)*torch.cos(r)) def torch_sin_map(c, z): return torch_complex_mult(*torch_complex_sin(*z), *c) . After exploring the Sine map, this is one of my favorites! . # parameters for the Electric Christmas Trees fractal map_func = torch_sin_map c = [1.0, 0.1] xrange = yrange = (-5,5) print(&#39;Electric Christmas Trees! (Sine map: c = 1.0 + 0.1i)&#39;) # image quality parameters resolution = 1024 n_iterations = 256 figsize = 16 tranform_func = lambda x: x # don&#39;t transform the output, default is do: -log(julia_img) # putting it all together! z = torch_complex_plane(xrange, yrange, resolution) img = torch_julia_generator(c, z, n_iterations, divergence_value, map_func=map_func) torch_plot_julia(img, sz=figsize, transform_func=tranform_func) . Electric Christmas Trees! (Sine map: c = 1.0 + 0.1i) . I&#39;m excited to see where you take this. Tweet me at @dcato98 with a pic/video of your amazing creations! .",
            "url": "https://dcato98.github.io/blog/jupyter/visualization/python/cuda/numpy/pytorch/video/2020/04/28/CUDA-Accelerated-Julia-Fractals.html",
            "relUrl": "/jupyter/visualization/python/cuda/numpy/pytorch/video/2020/04/28/CUDA-Accelerated-Julia-Fractals.html",
            "date": " • Apr 28, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Zip and Unzip in Python",
            "content": "Overview: . select files in directory | select a sample of files | write sampled filepaths into csv | zip sampled files | unzip sampled files | read sampled filepaths from csv | from pathlib import Path from fastai.vision import get_image_files import numpy as np from zipfile import ZipFile . # working directory path = Path(&#39;/home/dc/coronahack/source/nih-chest-xrays&#39;) # source directory containing files to zip src_dir = path / &#39;data&#39; # csv filepath (to be created/overwritten) csv_dst = path / &#39;nih-chest-xrays_sample-2000.csv&#39; # zip filepath (to be created/overwritten) zip_dst = path / &#39;nih-chest-xrays_sample-2000.zip&#39; # unzip directory (to be created/overwritten) unzip_dst = path / &#39;sample-2000&#39; . Create Zip . 1. Select files in specified directory . (e.g all image files in dir + subdirs) . files = sorted(get_image_files(src_dir, recurse=True)) len(files), files[:5] . (112120, [PosixPath(&#39;/home/dc/coronahack/source/nih-chest-xrays/data/images_001/images/00000001_000.png&#39;), PosixPath(&#39;/home/dc/coronahack/source/nih-chest-xrays/data/images_001/images/00000001_001.png&#39;), PosixPath(&#39;/home/dc/coronahack/source/nih-chest-xrays/data/images_001/images/00000001_002.png&#39;), PosixPath(&#39;/home/dc/coronahack/source/nih-chest-xrays/data/images_001/images/00000002_000.png&#39;), PosixPath(&#39;/home/dc/coronahack/source/nih-chest-xrays/data/images_001/images/00000003_000.png&#39;)]) . 2. Randomly sample n files from list . (optional: set seed) . n = 2000 seed = np.random.randint(0, 2**32-1) # seed = 0 np.random.seed(seed) sample_paths = np.random.choice(files, n, replace=False) sample_paths . array([PosixPath(&#39;/home/dc/coronahack/source/nih-chest-xrays/data/images_007/images/00014129_003.png&#39;), PosixPath(&#39;/home/dc/coronahack/source/nih-chest-xrays/data/images_008/images/00017368_000.png&#39;), PosixPath(&#39;/home/dc/coronahack/source/nih-chest-xrays/data/images_003/images/00005798_002.png&#39;), PosixPath(&#39;/home/dc/coronahack/source/nih-chest-xrays/data/images_010/images/00021488_002.png&#39;), ..., PosixPath(&#39;/home/dc/coronahack/source/nih-chest-xrays/data/images_004/images/00007094_000.png&#39;), PosixPath(&#39;/home/dc/coronahack/source/nih-chest-xrays/data/images_009/images/00019415_001.png&#39;), PosixPath(&#39;/home/dc/coronahack/source/nih-chest-xrays/data/images_002/images/00002271_000.png&#39;), PosixPath(&#39;/home/dc/coronahack/source/nih-chest-xrays/data/images_002/images/00003658_005.png&#39;)], dtype=object) . 3. Write csv of original file paths into csv_dst file . csv_dst.exists(), csv_dst . (True, PosixPath(&#39;/home/dc/coronahack/source/nih-chest-xrays/nih-chest-xrays_sample-2000.csv&#39;)) . np.savetxt(csv_dst, sample_paths.astype(np.str), fmt=&#39;%s&#39;, delimiter=&#39;,&#39;) . 4. Zip files in list into zip_dst file . zip_dst.exists(), zip_dst . (True, PosixPath(&#39;/home/dc/coronahack/source/nih-chest-xrays/nih-chest-xrays_sample-2000.zip&#39;)) . with ZipFile(zip_dst,&#39;w&#39;) as zf: for fn in sample_paths: zf.write(fn) . Unzip files . 5. Unzip files into unzip_dst folder . unzip_dst.mkdir(parents=True, exist_ok=True) unzip_dst.exists(), unzip_dst . (True, PosixPath(&#39;/home/dc/coronahack/source/nih-chest-xrays/sample-2000&#39;)) . with ZipFile(zip_dst, &#39;r&#39;) as zf: # zf.printdir() # print zip contents zf.extractall(unzip_dst) . 6. Load csv of original file paths . csv_dst.exists(), csv_dst . (True, PosixPath(&#39;/home/dc/coronahack/source/nih-chest-xrays/nih-chest-xrays_sample-2000.csv&#39;)) . np.loadtxt(csv_dst, dtype=np.str, delimiter=&#39;,&#39;) . array([&#39;/home/dc/coronahack/source/nih-chest-xrays/data/images_007/images/00014129_003.png&#39;, &#39;/home/dc/coronahack/source/nih-chest-xrays/data/images_008/images/00017368_000.png&#39;, &#39;/home/dc/coronahack/source/nih-chest-xrays/data/images_003/images/00005798_002.png&#39;, &#39;/home/dc/coronahack/source/nih-chest-xrays/data/images_010/images/00021488_002.png&#39;, ..., &#39;/home/dc/coronahack/source/nih-chest-xrays/data/images_004/images/00007094_000.png&#39;, &#39;/home/dc/coronahack/source/nih-chest-xrays/data/images_009/images/00019415_001.png&#39;, &#39;/home/dc/coronahack/source/nih-chest-xrays/data/images_002/images/00002271_000.png&#39;, &#39;/home/dc/coronahack/source/nih-chest-xrays/data/images_002/images/00003658_005.png&#39;], dtype=&#39;&lt;U82&#39;) .",
            "url": "https://dcato98.github.io/blog/jupyter/python/quick-demo/2020/04/18/Zip-and-Unzip-in-Python.html",
            "relUrl": "/jupyter/python/quick-demo/2020/04/18/Zip-and-Unzip-in-Python.html",
            "date": " • Apr 18, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "Hi there, I’m David, and welcome to my experimental blogspace. . I’m currently looking for opportunities to build AI-powered tools as a machine learning engineer (or similar), especially those that aim to improve human communication, connection, learning, and insight. I intend to expand on my goals in a future post. . I plan on using this as a place to highlight a few of my my projects, tutorials, lists, and other thoughts. I would love to hear what you think. Get in touch with me on LinkedIn: david-cato or Twitter: @dcato98. . . This website is powered by fastpages, a blogging platform that natively supports Jupyter notebooks and other formats. Thank you especially to @hamelsmu for your work building this tool and also to @1littlecoder for your video which made an already simple setup process even easier! .",
          "url": "https://dcato98.github.io/blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

}